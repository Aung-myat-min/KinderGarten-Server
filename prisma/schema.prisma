generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Lesson {
  lessonId    Int        @id @default(autoincrement())
  lessonType  LessonType
  subject     Subject
  modules     Module[]
  lessonTitle String

  markedComplete MarkLessonComplete[]
}

model Module {
  moduleId Int     @id @default(autoincrement())
  word     String
  photoUrl String?
  lessonId Int

  Lesson Lesson @relation(fields: [lessonId], references: [lessonId])
}

model Test {
  testId   Int       @id @default(autoincrement())
  subject  Subject
  testType TestType
  answer   String?
  question Question? // One-to-one relation with Question

  result TestResult[]
}

model Question {
  questionId   Int          @id @default(autoincrement())
  testId       Int          @unique
  questionType QuestionType
  text         String

  multipleChoice MultipleChoice?
  fillInTheBlank FillInTheBlank?
  photoQuestion  PhotoQuestion?

  Test Test @relation(fields: [testId], references: [testId], onDelete: Cascade)
}

model MultipleChoice {
  questionId          Int      @id @default(autoincrement())
  multipleChoicePhoto String?
  question            Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  options             Option[]
}

model FillInTheBlank {
  questionId    Int      @id @default(autoincrement())
  question      Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  correctAnswer String // Correct answer for fill-in-the-blank questions
}

model PhotoQuestion {
  questionId Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  photoUrl   String // URL of the image for photo questions
}

model Option {
  optionId         Int     @id @default(autoincrement())
  text             String
  isCorrect        Boolean // Indicates the correct answer for MultipleChoice questions
  multipleChoiceId Int

  multipleChoice MultipleChoice @relation(fields: [multipleChoiceId], references: [questionId], onDelete: Cascade)
}

model Parent {
  parentId   Int      @id @default(autoincrement())
  name       String
  DOB        DateTime
  NRC        String
  gender     Gender
  email      String   @unique
  password   String
  profileURL String

  children Child[]
}

model Child {
  childId    Int      @id @default(autoincrement())
  name       String
  DOB        DateTime
  gender     Gender
  createdAt  DateTime @default(now())
  parentId   Int
  profileURL String

  parent            Parent               @relation(fields: [parentId], references: [parentId])
  completedLesssons MarkLessonComplete[]
  testResult        TestResult[]
}

model MarkLessonComplete {
  completeId    Int        @id @default(autoincrement())
  subject       Subject
  lessonType    LessonType
  completedDate DateTime   @default(now())
  childId       Int
  lessonId      Int

  child  Child  @relation(fields: [childId], references: [childId])
  lesson Lesson @relation(fields: [lessonId], references: [lessonId])
}

model TestResult {
  resultId  Int      @id @default(autoincrement())
  testType  TestType
  subject   Subject
  total     Int
  correct   Int
  wrong     Int
  createdAt DateTime
  childId   Int
  testId    Int

  child Child @relation(fields: [childId], references: [childId])
  test  Test  @relation(fields: [testId], references: [testId])
}

enum Gender {
  male
  female
}

enum TestType {
  MultipleChoice
  FillInTheBlank
  PhotoQuestion
}

enum QuestionType {
  MultipleChoice
  FillInTheBlank
  PhotoQuestion
}

enum Subject {
  English
  Myanmar
}

enum LessonType {
  letter
  number
  bodypart
  color
  animal
  shape
}
